declare type Method = "GET" | "POST" | "DELETE" | "PUT";
declare type Headers = {
    [name: string]: string;
};
interface Request<RequestBody> {
    method: Method;
    url: string;
    timeoutMs?: number;
    headers?: Headers;
    body?: RequestBody | string;
}
interface Response {
    statusCode: number;
    headers: Headers;
    body: string;
}
declare type SuccessCallback = (response: Response) => void;
declare type ErrorCallback = (err: Error) => void;
interface ResponseHandler {
    onSuccess: SuccessCallback;
    onError: ErrorCallback;
}
interface NetworkTransport {
    fetchAndParse<RequestBody extends any, ResponseBody extends any>(request: Request<RequestBody>): Promise<ResponseBody>;
    fetchWithCallbacks<RequestBody extends any>(request: Request<RequestBody>, handler: ResponseHandler): void;
}
declare class DefaultNetworkTransport implements NetworkTransport {
    static fetch: typeof fetch;
    static AbortController: typeof AbortController;
    static DEFAULT_HEADERS: {
        Accept: string;
        "Content-Type": string;
    };
    constructor();
    fetchAndParse<RequestBody extends any, ResponseBody extends any>(request: Request<RequestBody>): Promise<ResponseBody>;
    fetchWithCallbacks<RequestBody extends any>(request: Request<RequestBody>, handler: ResponseHandler): void;
    private fetch;
    private createTimeoutSignal;
}

export { DefaultNetworkTransport, ErrorCallback, Method, NetworkTransport, Request, Response, SuccessCallback };
